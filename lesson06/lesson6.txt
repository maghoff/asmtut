#asmtut 6: Live interaction (Follow-up to https://plus.google.com/111794994501300143213/posts/VcfnDyjS5RU)

Since the last time, the nasm people have been able to fix the bugs I stumbled upon, and pushed them in a release: http://www.nasm.us/pub/nasm/releasebuilds/2.10.06/macosx/nasm-2.10.06-macosx.zip

Anything newer than 2.10.6 is probably also fine. Please note that you have to update if you are following this tutorial on OS X, because we will be triggering the bugs present in earlier versions.

With that out of the way, let's dive into making the game real time, so you don't have to hold down buttons on the keyboard. This should serve as a good repetition after a long hiatus, because we will only be doing more of the stuff we have already learned.

*Step 13: ANSI escape codes*

This part is for you, +Michael Mortensen!

When playing the latest version of the game we are making, we would fill the scrollback buffer in the terminal quite quickly with uninteresting prints of former game states. What we want to do instead is to print new versions of the board on top of the previous version. To do this, we will use an ANSI escape code sequence to move the cursor up to the top of the board each time we print it: http://en.wikipedia.org/wiki/ANSI_escape_code

We want to use the CSI code CUU; Cursor up. The structure for CUU is _ESC_, '[', number of rows to move upwards, 'A'. _ESC_ is the magic value 27 = 0x1b = 033. The number of rows we want to move is _height + 2_, counting the top and bottom solid lines in addition to the _height_ number of open lines:

    move_up  db  0x1b, '[27A' ; Keep number in string equal to height + 2

We can put this right above our definition of _board_, and then print the entire thing in one syscall. We also need the size. Let's put this calculation right under _board_size_:

    move_up_then_board_size equ $-move_up

If we print both of _move_up_ and _board_ instead of just _board_, it will finally stand still and not scroll back:

    mov rsi, move_up        ; buf
    mov rdx, move_up_then_board_size ; nbyte

In addidtion, we need to print it once without _move_up_ before entering _main_loop_, so we avoid overwriting the user's terminal history. This is easily accomplished by sticking an additional _syscall_ to _SYS_write_ just before _main_loop_.

Your program should now look like this: https://bitbucket.org/maghoff/asmtut/src/tip/lesson06/part1.asm


*Step 14: Velocity*

Next we will get some velocity going, so that the snake keeps moving in the direction it's going. We will do this by replacing the _inc_, _dec_, _add_ and _sub_ instructions in our _cmp_/_jne_ block by storing the appropriate velocity in _r15_ with appropriate _mov r15, <imm>_ instructions. We'll put in _add r8, r15_ just below _.main_loop:_. The additional details I'll leave as an excercise :)

Hopefully, you will end up with something like this: https://bitbucket.org/maghoff/asmtut/src/tip/lesson06/part2.asm


*Step 15: Nonblocking input*

Even though we are in half-cooked (sigh) mode, we are still in blocking mode. The _SYS_read_ call blocks until it can read at least one byte. Let's finally change that. We will do that by setting and unsetting the _O_NONBLOCK_ flag on _STDIN_FILENO_ with _SYS_fcntl_:

    SYS_fcntl       equ 0x02000000 + 92

    F_SETFL         equ 0x00000004
    O_NONBLOCK      equ 0x00000004

    mov rax, SYS_fcntl
    mov rdi, STDIN_FILENO
    mov rsi, F_SETFL
    mov rdx, O_NONBLOCK ; 0 to unset
    syscall

Unfortunately, even though we set this flag specifically on _STDIN_FILENO_, it magically applies to standard out as well. We don't need or want to handle nonblocking output, so we opt for the cheap workaround of setting and unsetting _O_NONBLOCK_ before and after calls to _SYS_read_. We'll set the flag just before _.read_more:_ and unset it between _.done:_ and _jmp .main_loop_. Running the game now, it seems to still be kind of blocking, at least until we press one key. This is because we currently do not attempt to tell the difference between having read one byte and not. Let's fix that.

Begin by removing the "Assume exactly one byte was read"-comment. In _man 2 read_ we see that the count of bytes read will be returned, and from the all-mighty ABI we learn that such a return value will be passed in _rax_. When no bytes are read because of _O_NONBLOCK_, _SYS_read_ will actually return -1 and claim that the error _EAGAIN_ has occurred. The simplest conclusion we can draw from this is that we check _rax_ and jump to _.done_ if it's not 1:

    cmp rax, 1
    jne .done

Your game should now be incredibly unplayable, and look something like this: https://bitbucket.org/maghoff/asmtut/src/tip/lesson06/part3.asm


*Step 16: Real time*

At this point we need some kind of real time game loop. However, it is easier to cheat and just sleep for a bit between each frame. The price we have to pay for going the easy route is that we have to implement _sleep_ in terms of _select_, since _sleep_ is not available directly as a syscall.

    SYS_select      equ 0x02000000 + 93

From _man select_:

    int select(int nfds, fd_set* readfds, fd_set* writefds, fd_set* errorfds, struct timeval* timeout);

_nfds_, _readfds_, _writefds_, and _errorfds_ can all be 0. That should fill up rdi, rsi, rdx and rcx. _timeout_ must point to a valid _timeval_ struct instance, its address placed in _r8_. Oh, nuts. Since we are already using _r8_, this is bad news. Let's just replace all instances of _r8_ with _r14_ to avert immediate disaster.

The declaration of _struct timeval_ is messy and ridden with preprocessor noise, but it boils down to this nasm:

    struc timeval
        ; resq: reserve quadword (64 bits)
        .tv_sec:    resq    1
        .tv_nsec:   resq    1
    endstruc

Now we get to exercise nasm's syntax for defining an instance of a struct in the data section:

    timeout:
        istruc timeval
            at timeval.tv_sec,  dq 0
            at timeval.tv_nsec, dq 100000
        iend

Then we're all set for adding the sleep call, right before _.read_more:_, so we can read any keypresses that happened during the sleep:

    mov rax, SYS_select
    mov rdi, 0              ; nfds
    mov rsi, 0              ; readfds
    mov rdx, 0              ; writefds
    mov rcx, 0              ; errorfds
    mov r8, timeout         ; timeout
    syscall

Your code should now approximate this: https://bitbucket.org/maghoff/asmtut/src/tip/lesson06/part4.asm

And playing the game should look kind of like this: http://www.youtube.com/watch?v=UnjGoughmH0v


_Next lesson: TBA_
